generator client {
  provider = "prisma-client-js"
  output   = "../generated/global-client"
}

datasource db {
  provider = "cockroachdb"
  url      = env("globalCockroachdbURI")
}

model Account {
  userUid                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  activityBonus           BigInt
  encryptBalance          String
  encryptDeductionBalance String
  created_at              DateTime @default(now()) @db.Timestamptz(3)
  create_region_id        String
  balance                 BigInt?
  deduction_balance       BigInt?
}

model AccountTransaction {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type              String
  deduction_balance BigInt
  balance           BigInt
  message           String?
  created_at        DateTime @default(now()) @db.Timestamptz(3)
  updated_at        DateTime @default(now()) @db.Timestamptz(3)
  billing_id        String   @db.Uuid
  userUid           String   @db.Uuid
}

model AuditLog {
  uid        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entityUid  String
  entityName String
  createdAt  DateTime    @default(now()) @db.Timestamptz(3)
  action     AuditAction
}

model AuditLogDetail {
  auditLogUid String @id
  key         String
  preValue    String
  newValue    String
}

model CommitTransactionSet {
  createdAt               DateTime @default(now()) @db.Timestamptz(3)
  precommitTransactionUid String   @unique @db.Uuid
}

model DeleteUserLog {
  userUid   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model DeleteUserTransactionInfo {
  uid     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userUid String @unique
}

model ErrorAccountCreate {
  userUid                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  activityBonus           BigInt
  encryptBalance          String
  encryptDeductionBalance String
  created_at              DateTime @default(now()) @db.Timestamptz(3)
  create_region_id        String
  balance                 BigInt?
  deduction_balance       BigInt?
  userCr                  String   @unique
  error_time              DateTime @default(now()) @db.Timestamptz(3)
  regionUid               String   @db.Uuid
  regionUserOwner         String
  message                 String
}

model ErrorPaymentCreate {
  userUid         String   @db.Uuid
  regionUid       String   @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamptz(3)
  regionUserOwner String
  method          String
  amount          BigInt
  gift            BigInt?
  trade_no        String   @unique
  code_url        String?
  invoiced_at     Boolean? @default(false)
  remark          String?
  message         String
  create_time     DateTime @default(now()) @db.Timestamptz(3)
}

model ErrorPreCommitTransaction {
  uid            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reason         String?
  createdAt      DateTime @default(now()) @db.Timestamptz(3)
  transactionUid String   @unique @db.Uuid
}

model EventLog {
  uid       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  mainId    String
  eventName String
  data      String
}

model InviteReward {
  payment_id     String   @id
  userUid        String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamptz(3)
  payment_amount BigInt
  reward_amount  BigInt
  inviteFrom     String   @db.Uuid
}

model Invoice {
  id           String    @id
  user_id      String
  created_at   DateTime? @default(now()) @db.Timestamptz(3)
  updated_at   DateTime? @db.Timestamptz(3)
  detail       String
  remark       String?
  total_amount BigInt
  status       String
}

model InvoicePayment {
  invoice_id String?
  payment_id String  @id
  amount     BigInt
}

model MergeUserTransactionInfo {
  uid          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mergeUserUid String @unique
  userUid      String

  @@index([userUid])
}

model OauthProvider {
  uid          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userUid      String       @db.Uuid
  createdAt    DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime     @db.Timestamptz(3)
  providerType ProviderType
  providerId   String
  password     String?

  @@unique([providerId, providerType])
  @@index([userUid])
}

model Payment {
  id              String   @id
  userUid         String   @db.Uuid
  regionUid       String   @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamptz(3)
  regionUserOwner String
  method          String
  amount          BigInt
  gift            BigInt?
  trade_no        String   @unique
  code_url        String?
  invoiced_at     Boolean? @default(false)
  remark          String?
  message         String
}

model PrecommitTransaction {
  uid             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime          @db.Timestamptz(3)
  transactionType TransactionType
  infoUid         String
  status          TransactionStatus

  @@unique([infoUid, transactionType])
}

model RealNameAuthProvider {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  backend        String
  authType       String
  maxFailedTimes Int
  config         Json?
  createdAt      DateTime @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime @db.Timestamptz(3)
}

model Region {
  uid         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  displayName String
  location    String
  domain      String
  description String?
}

model RestrictedUser {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userUid         String   @unique @db.Uuid
  restrictedLevel Int
  createdAt       DateTime @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime @db.Timestamptz(3)
  additionalInfo  Json?
}

model TransactionDetail {
  uid            String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime          @db.Timestamptz(3)
  status         TransactionStatus
  regionUid      String
  transactionUid String

  @@unique([transactionUid, regionUid])
  @@index([regionUid])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Transfer {
  uid         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fromUserUid String   @db.Uuid
  toUserUid   String   @db.Uuid
  amount      BigInt
  remark      String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
}

model User {
  uid       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime   @db.Timestamptz(3)
  avatarUri String
  nickname  String
  id        String     @unique
  name      String     @unique
  status    UserStatus @default(NORMAL_USER)
}

model UserRealNameInfo {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userUid             String   @unique @db.Uuid
  realName            String?
  idCard              String?
  phone               String?
  isVerified          Boolean  @default(false)
  idVerifyFailedTimes Int      @default(0)
  createdAt           DateTime @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime @db.Timestamptz(3)
  additionalInfo      Json?
}

model UserSemChannel {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userUid        String   @unique @db.Uuid
  channel        String
  createdAt      DateTime @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime @db.Timestamptz(3)
  additionalInfo Json?
}

model UserTransfer {
  id          String
  uid         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fromUserUid String    @db.Uuid
  fromUserId  String
  toUserUid   String    @db.Uuid
  toUserId    String
  amount      BigInt
  remark      String
  created_at  DateTime? @default(now()) @db.Timestamptz(3)

  @@id([id, uid])
}

model GiftCode {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code         String    @unique
  creditAmount BigInt    @default(0)
  used         Boolean   @default(false)
  usedBy       String?   @db.Uuid
  usedAt       DateTime?
  createdAt    DateTime  @default(now())
  expiredAt    DateTime?
  comment      String?
}

enum AuditAction {
  UPDATE
  DELETE
  CREATE
}

enum ProviderType {
  PHONE
  GITHUB
  WECHAT
  GOOGLE
  PASSWORD
  OAUTH2
  EMAIL
}

enum TransactionStatus {
  READY
  RUNNING
  FINISH
  COMMITED
  ERROR
}

enum TransactionType {
  MERGE_USER
  DELETE_USER
}

enum UserStatus {
  NORMAL_USER
  LOCK_USER
  DELETE_USER
}
